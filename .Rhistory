for(i in 1:dim(ID_RFNB)[1]){
if(sum(is.na(ID_RFNB[i,45:50]))>1){
ID_RFNB1[i,]=ID_RFNB[i,]
} else {
ID_RFNB2[i,]=ID_RFNB[i,]
}
}
index=CPI$GEO=="Canada"&CPI$Ref_Date==(2005)|CPI$Ref_Date==(2006)|CPI$Ref_Date==(2007)|CPI$Ref_Date==(2008)|CPI$Ref_Date==(2009)|CPI$Ref_Date==(2010)
baseCPI=mean(CPI$Value[index])
fits=data.frame(b=rep(NA,dim(ID_RFNB)[1]),m=rep(NA,dim(ID_RFNB)[1]))
for(i in 1:dim(ID_RFNB)[1]){
x=CPI$Value[CPI$Ref_Date>=2005&CPI$Ref_Date<=2010&CPI$GEO=="Canada"]-baseCPI
y=as.numeric(ID_RFNB2[i,45:50])
if(sum(is.na(y))<4){
lm_data=data.frame(cbind(y,x))
fit=lm(lm_data$y~lm_data$x,data=lm_data)
#plot(x,y)
#abline(coef(fit))
fits[i,]=c(fit$coefficients[1],fit$coefficients[2])
}
}
b=mean(fits$b,na.rm=T)
m=mean(fits$m,na.rm=T)
###### correct for temporal National level CPI ############
ID_RFNB$C_RFNB2010=0
ID_RFNB$C_RFNB2009=0
ID_RFNB$C_RFNB2008=0
ID_RFNB$C_RFNB2007=0
ID_RFNB$C_RFNB2006=0
ID_RFNB$C_RFNB2005=0
for(y in 1:6){
for(i in 1:dim(ID_RFNB)[1]){
ID_RFNB[i,64-y]=ID_RFNB[i,44+y]-m*(CPI$Value[CPI$Ref_Date==(2004+y)&CPI$GEO=="Canada"]-baseCPI)
}
}
ID_RFNB$avg_CRFNB=0
for(i in 1:dim(ID_RFNB)[1]){
ID_RFNB$avg_CRFNB[i]=mean(as.numeric(ID_RFNB[i,58:63]),na.rm=T)
}
fit <- lm(avg_CRFNB ~avg_neRFNB+ne_dist+nc_dist+POPULATION+avg_ICCPI, data=ID_RFNB)
summary(fit) # show results
AIC(fit)
#fit <- lm(avg_CRFNB ~avg_neRFNB+ne_dist+nc_dist+avg_ICCPI, data=ID_RFNB)
#summary(fit) # show results
#AIC(fit)
#fit <- lm(avg_CRFNB ~avg_neRFNB+ne_dist+avg_ICCPI, data=ID_RFNB)
#summary(fit) # show results
#AIC(fit)
#fit <- lm(avg_CRFNB ~avg_neRFNB+ne_dist+nc_dist, data=ID_RFNB)
#summary(fit) # show results
#AIC(fit)
#calculate distance from nearest "intercity index" and "entry point" for inuit_data
library(fields)
inuit_data$RFNBRegion=0
inuit_data$nearcity=0
inuit_data$nc_dist=0
inuit_data$nearentry=0
inuit_data$ne_dist=0
inuit_data$avg_neRFNB=0
for(i in 1:dim(inuit_data)[1]){
if(sum(inuit_data$NAME[i]==ID_RFNB$NAME)>0){
inuit_data$RFNBRegion[i]=as.character(ID_RFNB$Region[inuit_data$NAME[i]==ID_RFNB$NAME])
}
}
inuit_data$RFNBRegion[inuit_data$NAME=="Ivujivik"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Aklavik"]="Northwest Territories"
inuit_data$RFNBRegion[inuit_data$NAME=="Bathurst Inlet"]="Kitikmeot Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Umingmaktuuq"]="Kitikmeot Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Kuujjuaraapik"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Quaqtaq"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Resolute Bay"]="Baffin Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Aupaluk"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Killiniq"]="Nunavik Region"
distmat=rdist.earth(cbind(inuit_data$Long_X,inuit_data$Lat_Y),cbind(cityLL$Longitude,cityLL$Latitude),miles=F)
for(i in 1:dim(inuit_data)[1]){
inuit_data$nearcity[i]= as.character(cityLL$InterCity[(distmat==apply(distmat,1,function(x) min(x)))[i,]])
index=cityLL$InterCity==inuit_data$nearcity[i]
inuit_data$nc_dist[i]=rdist.earth(cbind(inuit_data$Long_X[i],inuit_data$Lat_Y[i]),cbind(cityLL$Longitude[index],cityLL$Latitude[index]),miles=F)
index=RFNB$Region==inuit_data$RFNBRegion[i]&RFNB$Type=="Entry"
distmat2=rdist.earth(cbind(inuit_data$Long_X[i],inuit_data$Lat_Y[i]),cbind(RFNB$long[index],RFNB$lat[index]),miles=F)
inuit_data$nearentry[i]=cbind(as.character(RFNB$Name[index]))[distmat2==min(distmat2)]
inuit_data$ne_dist[i]=min(distmat2)
inuit_data$avg_neRFNB[i]=mean(as.numeric(RFNB[RFNB$Region==inuit_data$RFNBRegion[i]&RFNB$Name==inuit_data$nearentry[i],7:12]),na.rm=T)
inuit_data$avg_ICCPI[i]=mean(as.numeric(InterCity$Value[InterCity$Ref_Date>=2005&InterCity$Ref_Date<=2010&InterCity$GEO==(ID_RFNB$nearcity[i])]))-100
}
#estimate for each year
inuit_data$est_RFNB2012=0
inuit_data$est_RFNB2011=0
inuit_data$est_RFNB2010=0
inuit_data$est_RFNB2009=0
inuit_data$est_RFNB2008=0
inuit_data$est_RFNB2007=0
inuit_data$est_RFNB2006=0
inuit_data$est_RFNB2005=0
for(y in 1:8){
for(i in 1:dim(inuit_data)[1]){
inuit_data[i,55-y]=as.numeric(fit$coefficients[1]
+fit$coefficients[2]*inuit_data$avg_neRFNB[i]
+fit$coefficients[3]*inuit_data$ne_dist[i]
+fit$coefficients[4]*inuit_data$nc_dist[i]
+fit$coefficients[5]*inuit_data$POPULATION[i]
+fit$coefficients[6]*inuit_data$avg_ICCPI[i]
+m*(CPI$Value[CPI$GEO=="Canada"&CPI$Ref_Date==(2004+y)]-baseCPI)
)
}
}
#merge inuit_data with RFNB again
ID_RFNB=merge(inuit_data,RFNB,by.x="NAME",by.y="Name",all=F,incomparables = NULL)
lm_data=data.frame(RFNB=rep(NA,dim(ID_RFNB)[1]*6),est_RFNB=rep(NA,dim(ID_RFNB)[1]*6))
for(y in 1:6){
for(i in 1:dim(ID_RFNB)[1]){
index=((y-1)*dim(ID_RFNB)[1])+i
lm_data$RFNB[index]=ID_RFNB[i,58+y]
lm_data$est_RFNB[index]=ID_RFNB[i,54-y]
}
}
fit <- lm(lm_data$est_RFNB ~ lm_data$RFNB, data=lm_data)
summary(fit) # show results
plot(lm_data,xlab="Revised Northern Food Basket ($)",ylab="Estimated Revised Northern Food Basket ($)",ylim=c(250,500),xlim=c(250,500))
lines(cbind(c(0,500),c(0,500)))
abline(coef(fit), lty=2)
View(CPI)
#######################################################################################################################################################
## include nearest entry point, split data set for CPI and avg entry point RFNB as intercept
#######################################################################################################################################################
### Food prices ###
library(foreign)
inuit_data=read.dbf("C:/Users/Remi-Work/Documents/ArcGIS/Inuit.dbf")
RFNB=read.csv("~/R/OHI/RFNB.csv")
InterCity=read.csv("~/R/OHI/03260015-eng.csv")
CPI=read.csv("~/R/OHI/03260021-eng.csv")
InterCity=InterCity[InterCity$COMMODITY=="Food",]
CPI=CPI[CPI$COMM=="Food",]
cityLL=read.csv("~/R/OHI/InterCity_LL.csv")
#merge inuit_data with RFNB
ID_RFNB=merge(inuit_data,RFNB,by.x="NAME",by.y="Name")
#calculate distance from nearest "intercity index" and "entry point"
library(fields)
distmat=rdist.earth(cbind(ID_RFNB$Long_X,ID_RFNB$Lat_Y),cbind(cityLL$Longitude,cityLL$Latitude),miles=F)
ID_RFNB$nearcity=0
ID_RFNB$nc_dist=0
ID_RFNB$nearentry=0
ID_RFNB$ne_dist=0
ID_RFNB$avg_neRFNB=0
ID_RFNB$avg_RFNB=0
ID_RFNB$avg_ICCPI=0
for(i in 1:dim(ID_RFNB)[1]){
ID_RFNB$nearcity[i]= as.character(cityLL$InterCity[(distmat==apply(distmat,1,function(x) min(x)))[i,]])
index=cityLL$InterCity==ID_RFNB$nearcity[i]
ID_RFNB$nc_dist[i]=rdist.earth(cbind(ID_RFNB$Long_X[i],ID_RFNB$Lat_Y[i]),cbind(cityLL$Longitude[index],cityLL$Latitude[index]),miles=F)
index=RFNB$Region==ID_RFNB$Region[i]&RFNB$Type=="Entry"
distmat2=rdist.earth(cbind(ID_RFNB$Long_X[i],ID_RFNB$Lat_Y[i]),cbind(RFNB$long[index],RFNB$lat[index]),miles=F)
ID_RFNB$nearentry[i]=cbind(as.character(RFNB$Name[index]))[distmat2==min(distmat2)]
ID_RFNB$ne_dist[i]=min(distmat2)
ID_RFNB$avg_neRFNB[i]=mean(as.numeric(RFNB[RFNB$Region==ID_RFNB$Region[i]&RFNB$Name==ID_RFNB$nearentry[i],7:12]),na.rm=T)
ID_RFNB$avg_RFNB[i]=mean(as.numeric(ID_RFNB[i,45:50]),na.rm=T)
ID_RFNB$avg_ICCPI[i]=mean(as.numeric(InterCity$Value[InterCity$Ref_Date>=2005&InterCity$Ref_Date<=2010&InterCity$GEO==(ID_RFNB$nearcity[i])]))
}
#split data set
ID_RFNB2=ID_RFNB
ID_RFNB2[,]=NA
ID_RFNB1=ID_RFNB2
for(i in 1:dim(ID_RFNB)[1]){
if(sum(is.na(ID_RFNB[i,45:50]))>1){
ID_RFNB1[i,]=ID_RFNB[i,]
} else {
ID_RFNB2[i,]=ID_RFNB[i,]
}
}
index=CPI$GEO=="Canada"&CPI$Ref_Date==(2005)|CPI$Ref_Date==(2006)|CPI$Ref_Date==(2007)|CPI$Ref_Date==(2008)|CPI$Ref_Date==(2009)|CPI$Ref_Date==(2010)
baseCPI=mean(CPI$Value[index])
fits=data.frame(b=rep(NA,dim(ID_RFNB)[1]),m=rep(NA,dim(ID_RFNB)[1]))
for(i in 1:dim(ID_RFNB)[1]){
x=CPI$Value[CPI$Ref_Date>=2005&CPI$Ref_Date<=2010&CPI$GEO=="Canada"]-baseCPI
y=as.numeric(ID_RFNB2[i,45:50])
if(sum(is.na(y))<4){
lm_data=data.frame(cbind(y,x))
fit=lm(lm_data$y~lm_data$x,data=lm_data)
#plot(x,y)
#abline(coef(fit))
fits[i,]=c(fit$coefficients[1],fit$coefficients[2])
}
}
b=mean(fits$b,na.rm=T)
m=mean(fits$m,na.rm=T)
###### correct for temporal National level CPI ############
ID_RFNB$C_RFNB2010=0
ID_RFNB$C_RFNB2009=0
ID_RFNB$C_RFNB2008=0
ID_RFNB$C_RFNB2007=0
ID_RFNB$C_RFNB2006=0
ID_RFNB$C_RFNB2005=0
for(y in 1:6){
for(i in 1:dim(ID_RFNB)[1]){
ID_RFNB[i,64-y]=ID_RFNB[i,44+y]-m*(CPI$Value[CPI$Ref_Date==(2004+y)&CPI$GEO=="Canada"]-baseCPI)
}
}
ID_RFNB$avg_CRFNB=0
for(i in 1:dim(ID_RFNB)[1]){
ID_RFNB$avg_CRFNB[i]=mean(as.numeric(ID_RFNB[i,58:63]),na.rm=T)
}
fit <- lm(avg_CRFNB ~nc_dist+POPULATION+avg_ICCPI, data=ID_RFNB)
summary(fit) # show results
AIC(fit)
#fit <- lm(avg_CRFNB ~avg_neRFNB+ne_dist+nc_dist+avg_ICCPI, data=ID_RFNB)
#summary(fit) # show results
#AIC(fit)
#fit <- lm(avg_CRFNB ~avg_neRFNB+ne_dist+avg_ICCPI, data=ID_RFNB)
#summary(fit) # show results
#AIC(fit)
#fit <- lm(avg_CRFNB ~avg_neRFNB+ne_dist+nc_dist, data=ID_RFNB)
#summary(fit) # show results
#AIC(fit)
#calculate distance from nearest "intercity index" and "entry point" for inuit_data
library(fields)
inuit_data$RFNBRegion=0
inuit_data$nearcity=0
inuit_data$nc_dist=0
inuit_data$nearentry=0
inuit_data$ne_dist=0
inuit_data$avg_neRFNB=0
for(i in 1:dim(inuit_data)[1]){
if(sum(inuit_data$NAME[i]==ID_RFNB$NAME)>0){
inuit_data$RFNBRegion[i]=as.character(ID_RFNB$Region[inuit_data$NAME[i]==ID_RFNB$NAME])
}
}
inuit_data$RFNBRegion[inuit_data$NAME=="Ivujivik"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Aklavik"]="Northwest Territories"
inuit_data$RFNBRegion[inuit_data$NAME=="Bathurst Inlet"]="Kitikmeot Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Umingmaktuuq"]="Kitikmeot Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Kuujjuaraapik"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Quaqtaq"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Resolute Bay"]="Baffin Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Aupaluk"]="Nunavik Region"
inuit_data$RFNBRegion[inuit_data$NAME=="Killiniq"]="Nunavik Region"
distmat=rdist.earth(cbind(inuit_data$Long_X,inuit_data$Lat_Y),cbind(cityLL$Longitude,cityLL$Latitude),miles=F)
for(i in 1:dim(inuit_data)[1]){
inuit_data$nearcity[i]= as.character(cityLL$InterCity[(distmat==apply(distmat,1,function(x) min(x)))[i,]])
index=cityLL$InterCity==inuit_data$nearcity[i]
inuit_data$nc_dist[i]=rdist.earth(cbind(inuit_data$Long_X[i],inuit_data$Lat_Y[i]),cbind(cityLL$Longitude[index],cityLL$Latitude[index]),miles=F)
index=RFNB$Region==inuit_data$RFNBRegion[i]&RFNB$Type=="Entry"
distmat2=rdist.earth(cbind(inuit_data$Long_X[i],inuit_data$Lat_Y[i]),cbind(RFNB$long[index],RFNB$lat[index]),miles=F)
inuit_data$nearentry[i]=cbind(as.character(RFNB$Name[index]))[distmat2==min(distmat2)]
inuit_data$ne_dist[i]=min(distmat2)
inuit_data$avg_neRFNB[i]=mean(as.numeric(RFNB[RFNB$Region==inuit_data$RFNBRegion[i]&RFNB$Name==inuit_data$nearentry[i],7:12]),na.rm=T)
inuit_data$avg_ICCPI[i]=mean(as.numeric(InterCity$Value[InterCity$Ref_Date>=2005&InterCity$Ref_Date<=2010&InterCity$GEO==(ID_RFNB$nearcity[i])]))
}
#estimate for each year
inuit_data$est_RFNB2012=0
inuit_data$est_RFNB2011=0
inuit_data$est_RFNB2010=0
inuit_data$est_RFNB2009=0
inuit_data$est_RFNB2008=0
inuit_data$est_RFNB2007=0
inuit_data$est_RFNB2006=0
inuit_data$est_RFNB2005=0
for(y in 1:8){
for(i in 1:dim(inuit_data)[1]){
inuit_data[i,55-y]=as.numeric(fit$coefficients[1]
#+fit$coefficients[2]*inuit_data$avg_neRFNB[i]
#+fit$coefficients[3]*inuit_data$ne_dist[i]
+fit$coefficients[2]*inuit_data$nc_dist[i]
+fit$coefficients[3]*inuit_data$POPULATION[i]
+fit$coefficients[4]*inuit_data$avg_ICCPI[i]
+m*(CPI$Value[CPI$GEO=="Canada"&CPI$Ref_Date==(2004+y)]-baseCPI)
)
}
}
#merge inuit_data with RFNB again
ID_RFNB=merge(inuit_data,RFNB,by.x="NAME",by.y="Name",all=F,incomparables = NULL)
lm_data=data.frame(RFNB=rep(NA,dim(ID_RFNB)[1]*6),est_RFNB=rep(NA,dim(ID_RFNB)[1]*6))
for(y in 1:6){
for(i in 1:dim(ID_RFNB)[1]){
index=((y-1)*dim(ID_RFNB)[1])+i
lm_data$RFNB[index]=ID_RFNB[i,58+y]
lm_data$est_RFNB[index]=ID_RFNB[i,54-y]
}
}
fit <- lm(lm_data$est_RFNB ~ lm_data$RFNB, data=lm_data)
summary(fit) # show results
plot(lm_data,xlab="Revised Northern Food Basket ($)",ylab="Estimated Revised Northern Food Basket ($)",ylim=c(250,500),xlim=c(250,500))
lines(cbind(c(0,500),c(0,500)))
abline(coef(fit), lty=2)
require(ohicore)
require(ohigui)
wd = getwd()
ohigui::launchApp(scenario=list(
conf   = ohicore::Conf("conf"),
layers = ohicore::Layers("layers.csv", "layers"),
scores = read.csv("scores.csv", na.strings=""),
spatial = file.path(wd, "spatial"),
dir    = wd), launch.browser=T)
require(ohicore)
require(ohigui)
wd = getwd()
ohigui::launchApp(scenario=list(
conf   = ohicore::Conf("conf"),
layers = ohicore::Layers("layers.csv", "layers"),
scores = read.csv("scores.csv", na.strings=""),
spatial = file.path(wd, "spatial"),
dir    = wd), launch.browser=T)
launchApp()
launchApp(conf.Global2013.Canada)
ohigui::launchApp(scenario=list(
conf   = ohicore::Conf("conf"),
layers = ohicore::Layers("layers.csv", "layers"),
scores = read.csv("scores.csv", na.strings=""),
spatial = file.path(wd, "spatial"),
dir    = "~/myohi/scenario.Global2013.Canada"), launch.browser=T)
library(rgdal)
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 60, lat2 = 90,resolution = 10) -> Canada
#detach("package:marmap", unload=TRUE)
summary(Canada)
r1 <- as.raster(Canada)
projection <- "+proj=lcc +lon_0=-92.8667"
library(raster)
p <- rasterToPolygons(r1, dissolve=TRUE,fun=function(x){x<0&x>(-120)})
library(rgdal)
writeOGR(p,"C:/Users/Remi-Work/Documents/ArcGIS/bathy","Permafrost",driver="ESRI Shapefile",)
library(marmap)
library(maps)
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 60, lat2 = 90,resolution = 10) -> Canada
#detach("package:marmap", unload=TRUE)
summary(Canada)
r1 <- as.raster(Canada)
projection <- "+proj=lcc +lon_0=-92.8667"
library(raster)
p <- rasterToPolygons(r1, dissolve=TRUE,fun=function(x){x<0&x>(-120)})
library(rgdal)
writeOGR(p,"C:/Users/Remi-Work/Documents/ArcGIS/bathy","Permafrost",driver="ESRI Shapefile",)
writeOGR(p,"C:/Users/Remi-Work/Documents/ArcGIS/bathy","Permafrost",driver="ESRI Shapefile",)
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 40, lat2 = 90,resolution = 1) -> Canada
#detach("package:marmap", unload=TRUE)
summary(Canada)
r1 <- as.raster(Canada)
projection <- "+proj=lcc +lon_0=-92.8667"
library(raster)
#r2 <- projectRaster(r1,crs=projection)
#as.bathy(r2) -> Canada2
#plot.bathy(Canada2, image=T,bpal=gray(c(0.7,0.5,0)),deep = c(-9000, -300, 0), shallow = c(-300, 0, 0),step = c(9000, 300, 0), lwd = c(0.8, 0.8, 1),col = c("lightgrey", "darkgrey", "black"),lty = c(1, 1, 1), drawlabel = c(FALSE, FALSE, FALSE))
p <- rasterToPolygons(r1, dissolve=F,fun=function(x){x<(-300)})
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 40, lat2 = 90,resolution = 1) -> Canada
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 40, lat2 = 90,resolution = 10) -> Canada
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 40, lat2 = 90,resolution = 5) -> Canada
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 40, lat2 = 90,resolution = 1) -> Canada
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 40, lat2 = 90,resolution = 2) -> Canada
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 40, lat2 = 90,resolution = 2) -> Canada
#detach("package:marmap", unload=TRUE)
summary(Canada)
r1 <- as.raster(Canada)
projection <- "+proj=lcc +lon_0=-92.8667"
library(raster)
#r2 <- projectRaster(r1,crs=projection)
#as.bathy(r2) -> Canada2
#plot.bathy(Canada2, image=T,bpal=gray(c(0.7,0.5,0)),deep = c(-9000, -300, 0), shallow = c(-300, 0, 0),step = c(9000, 300, 0), lwd = c(0.8, 0.8, 1),col = c("lightgrey", "darkgrey", "black"),lty = c(1, 1, 1), drawlabel = c(FALSE, FALSE, FALSE))
p <- rasterToPolygons(r1, dissolve=F,fun=function(x){x<(-300)})
library(rgdal)
writeOGR(p,"C:/Users/Remi-Work/Documents/ArcGIS/bathy","MethaneHydrates",driver="ESRI Shapefile",)
getNOAA.bathy(lon1 = -150, lon2 = -40, lat1 = 60, lat2 = 90,resolution = 2) -> Canada
#detach("package:marmap", unload=TRUE)
summary(Canada)
r1 <- as.raster(Canada)
projection <- "+proj=lcc +lon_0=-92.8667"
library(raster)
p <- rasterToPolygons(r1, dissolve=F,fun=function(x){x<0&x>(-120)})
library(rgdal)
writeOGR(p,"C:/Users/Remi-Work/Documents/ArcGIS/bathy","Permafrost",driver="ESRI Shapefile",)
# Install dependencies
for (p in c('devtools','sqldf')){
if (!require(p, character.only=T)){
install.packages(p)
require(p, character.only=T)
}
}
# For production version, use github.user = 'ohi-science'
# For development version, use github.user = 'bbest'
github.user = 'ohi-science'
install_github('rCharts', github.user)
install_github('ohicore', github.user)
install_github('ohigui' , github.user)
# Launch application
ohigui::launchApp()
remove.packages("ohigui")
remove.packages("ohicore")
# Install dependencies
for (p in c('devtools','sqldf')){
if (!require(p, character.only=T)){
install.packages(p)
require(p, character.only=T)
}
}
# For production version, use github.user = 'ohi-science'
# For development version, use github.user = 'bbest'
github.user = 'ohi-science'
install_github('rCharts', github.user)
install_github('ohicore', github.user)
install_github('ohigui' , github.user)
# Launch application
ohigui::launchApp()
Ps2
Ps2 = SpatialPolygons(list(Ps1),c(1:length(Ps1)),CRS("+proj=longlat +datum=WGS84 +x_0=0 +y_0=0"))
library(rgdal)
library(foreign)
library(PBSmapping)
library(maptools)
y=readOGR("C:/Users/Remi-Work/Documents/ArcGIS","Inuit")
inuit_data=read.dbf("C:/Users/Remi-Work/Documents/ArcGIS/Inuit.dbf")
#projection <- CRS("+proj=lcc +lon_0=-92.8667 +units=m")
#projection <- CRS("+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs")
projection = CRS("+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
#projection=CRS("+proj=ups")
inuit=spTransform(y,projection)
### create circle function
circle <- function(lonlatpoint, radius) {
travelvector <- as.data.frame(cbind(direction = seq(0, 2*pi, by=2*pi/100), magnitude = radius))
Rearth <- 6372795
Dd <- travelvector$magnitude / Rearth
if (class(lonlatpoint) == "SpatialPoints") {
lata <- coordinates(lonlatpoint)[1,2] * (pi/180)
lona <- coordinates(lonlatpoint)[1,1] * (pi/180)
else {
lona <- lonlatpoint[1] * (pi/180)
}
latb <- asin(cos(Cc) * cos(lata) * sin(Dd) + sin(lata)
* sin(Dd) * cos(lata))
lonb[lonb < -pi] <- lonb[lonb < -pi] + 2 * pi
latb <- latb * (180 / pi)
lonb <- lonb * (180 / pi)
}
Cc <- travelvector$direction
lata <- lonlatpoint[2] * (pi/180)
cbind(longitude = lonb, latitude = latb)
lonb <- lona - dlon + pi/2
}
lonb[lonb >  pi] <- lonb[lonb >  pi] - 2 * pi
### Calculated overlapping area Ice+ring
dlon <- atan2(cos(Dd) - sin(lata) * sin(latb), sin(Cc)
* cos(Dd))
library(rgdal)
library(foreign)
library(PBSmapping)
install.packages("PBSmapping")
library(rgdal)
library(foreign)
library(PBSmapping)
library(maptools)
y=readOGR("C:/Users/Remi-Work/Documents/ArcGIS","Inuit")
inuit_data=read.dbf("C:/Users/Remi-Work/Documents/ArcGIS/Inuit.dbf")
#projection <- CRS("+proj=lcc +lon_0=-92.8667 +units=m")
#projection <- CRS("+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs")
projection = CRS("+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
#projection=CRS("+proj=ups")
inuit=spTransform(y,projection)
### create circle function
circle <- function(lonlatpoint, radius) {
travelvector <- as.data.frame(cbind(direction = seq(0, 2*pi, by=2*pi/100), magnitude = radius))
Rearth <- 6372795
Dd <- travelvector$magnitude / Rearth
Cc <- travelvector$direction
if (class(lonlatpoint) == "SpatialPoints") {
lata <- coordinates(lonlatpoint)[1,2] * (pi/180)
lona <- coordinates(lonlatpoint)[1,1] * (pi/180)
}
else {
lata <- lonlatpoint[2] * (pi/180)
lona <- lonlatpoint[1] * (pi/180)
}
latb <- asin(cos(Cc) * cos(lata) * sin(Dd) + sin(lata)
* cos(Dd))
dlon <- atan2(cos(Dd) - sin(lata) * sin(latb), sin(Cc)
* sin(Dd) * cos(lata))
lonb <- lona - dlon + pi/2
lonb[lonb >  pi] <- lonb[lonb >  pi] - 2 * pi
lonb[lonb < -pi] <- lonb[lonb < -pi] + 2 * pi
latb <- latb * (180 / pi)
lonb <- lonb * (180 / pi)
cbind(longitude = lonb, latitude = latb)
}
### Calculated overlapping area Ice+ring
filelist=list.files("C:/Users/Remi-Work/Documents/ArcGIS/NSIDC Sea Ice/shapefiles",pattern=".shp")
filelist=substr(filelist,1,23)
cover=data.frame(matrix(NA,nrow=length(filelist),ncol=length(inuit_data$Long_X)))
cover$filename=cover[,1]
for(t in 1:length(filelist)){
x=readOGR("C:/Users/Remi-Work/Documents/ArcGIS/NSIDC Sea Ice/shapefiles",layer=as.character(filelist[t]))
ice=spTransform(x,projection)
for(i in 1:length(inuit_data$Long_X)){
c1 = circle(cbind(inuit_data$Long_X[i], inuit_data$Lat_Y[i]),300000)
r1 = rbind(c1, c1[1, ])  # join
P1 = Polygon(r1)
Ps1 = Polygons(list(P1), ID = "a")
Ps2 = SpatialPolygons(list(Ps1),c(1:length(Ps1)),CRS("+proj=longlat +datum=WGS84 +x_0=0 +y_0=0"))
SPDF = SpatialPolygonsDataFrame(Ps2, data.frame(N = c("one"), row.names = c("a")))
ring=spTransform(SPDF,projection)
#plot(ice)
#plot(ring,add=T)
#title(paste("t=",as.character(t),"i=",as.character(i)))
print(paste("t=",as.character(t),"i=",as.character(i)))
ice2=combinePolys(SpatialPolygons2PolySet(ice))
ring2=combinePolys(SpatialPolygons2PolySet(ring))
res=try(combinePolys(joinPolys(ice2,ring2,"INT")),silent=T)
if(class(res)=="try-error"){
cover[t,i]=0
}else{
overlap=res
cover[t,i]=sum(calcArea(overlap, rollup=1)$area)
}
cover$filename[t]=filelist[t]
}
}
Ps2
data.frame(N = c("one"), row.names = c("a"))
